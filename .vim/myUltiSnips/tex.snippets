snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet


snippet fig "figure" bA
\begin{figure}[H]
\includegraphics[scale=0.3]{`

#!/bin/bash

#cd $(dirname $1)
mkdir -p images/
scrot -s 'screenshot-%Y_%m_%d_%H_%M_%S.png' -e 'mv $f images/; echo images/$f';

`}
\end{figure}
endsnippet





snippet isvg "includesvg"
\begin{figure}[H]
    \centering
    \def\svgwidth{0.5\textwidth}
    \includesvg[$0]{$1}
\end{figure}
endsnippet




# MATH
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
\] $0
endsnippet


snippet bma "BMatrix"
\begin{bmatrix}
	$0
\end{bmatrix}
endsnippet


snippet bar "Bar"
\bar{$1} $0
endsnippet

snippet hat "Hat"
\hat{$1} $0
endsnippet


snippet un "Dobbel undeline"
\underline{\underline{$1}}$0
endsnippet


# Section and subsection

snippet sec "Section" bA 
\section*{$1}
endsnippet

snippet ssec "Subsection" bA 
\subsection*{$1}
endsnippet
snippet sssec "SubSubSection" bA 
\subsubsection*{$1}
endsnippet

# Subscript 

#snippet '([A-Za-z])(\d)' "auto subscript" wrA
#`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
#endsnippet

#snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
#endsnippet

# fractions

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# Sympy

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet


# Latex template
snippet textem "LaTeX Template" bA 

\documentclass[a4paper,11pt]{article}
\usepackage[headheight=14pt, top=0.5cm, bottom=0.5cm, left=.5cm, right=.5cm]{geometry}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{tikz}
\usepackage{float}
\usepackage{transparent}
\usepackage{xifthen}
\usepackage{import}
\usepackage[final]{pdfpages}
\def\checkmark{\tikz\fill[scale=0.4](0,.35) -- (.25,0) -- (1,.7) -- (.25,.15) -- cycle;}
\setboolean{@twoside}{false}
\pdfminorversion=7
\setlength\parindent{0pt}

\newcommand{\incfig}[1]{%
    \def\svgwidth{\columnwidth}
    \import{./figures/}{#1.pdf_tex}
}

\begin{document}
\title{$1}
\date{}
\maketitle
\vspace{-2cm}


$2



\end{document}
endsnippet

priority 1000
snippet int
\int_{$1}^{$2}$0
endsnippet


snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

snippet td "superscript" iA
^{$1}$0
endsnippet

snippet scr "screenshot figure"
`!p
if snip.c == "":
	import os
	import re
	path = vim.eval('expand("%:p:h")')
	os.chdir(path)
	if not os.path.exists("images"):
		os.mkdir("images")
	files = os.listdir("images")
	if(len(files) == 0):
		num = 1
	else:
		files = " ".join(files)
		files = re.findall('\d+\.png',files)
		files = " ".join(files)
		files = re.findall('\d+',files)
		nums = [ int(i) for i in files ]
		nums.sort()
		num = nums[-1]
		num += 1
	filepath ="images/"+str(num)+".png"
	os.system("import "+filepath)
	snip += r"\begin{figure}[H]"
	snip += r"\centering"
	snip += r"\includegraphics[scale=0.3]{" + filepath + "}"
	snip += "\end{figure}"
`
endsnippet
